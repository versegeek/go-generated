// Package oauth2V1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package oauth2V1

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The OAuth 2.0 Auth endpoint
	// (GET /oauth2/v1/auth)
	GetOauth2V1Auth(c *gin.Context, params GetOauth2V1AuthParams)
	// Check if token is invalidated/revoked
	// (POST /oauth2/v1/extensions/blacklist)
	PostOauth2V1ExtensionsBlacklist(c *gin.Context)
	// The OAuth 2.0 Introspect endpoint
	// (POST /oauth2/v1/introspect)
	PostOauth2V1Introspect(c *gin.Context, params PostOauth2V1IntrospectParams)
	// The OAuth 2.0 Revoke endpoint
	// (POST /oauth2/v1/revoke)
	PostOauth2V1Revoke(c *gin.Context, params PostOauth2V1RevokeParams)
	// The OAuth 2.0 Token endpoint
	// (POST /oauth2/v1/token)
	PostOauth2V1Token(c *gin.Context, params PostOauth2V1TokenParams)
	// The OIDC userinfo endpoint
	// (POST /oauth2/v1/userinfo)
	PostOauth2V1Userinfo(c *gin.Context, params PostOauth2V1UserinfoParams)
	// The OIDC well-known endpoint
	// (GET /oauth2/v1/{tenant}/.well-known/openid-configuration)
	GetOauth2V1TenantWellKnownOpenidConfiguration(c *gin.Context, tenant string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetOauth2V1Auth operation middleware
func (siw *ServerInterfaceWrapper) GetOauth2V1Auth(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOauth2V1AuthParams

	// ------------- Required query parameter "client_id" -------------

	if paramValue := c.Query("client_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument client_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "client_id", c.Request.URL.Query(), &params.ClientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter client_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "idp_id" -------------

	if paramValue := c.Query("idp_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument idp_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "idp_id", c.Request.URL.Query(), &params.IdpId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter idp_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "redirect_uri" -------------

	if paramValue := c.Query("redirect_uri"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument redirect_uri is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "redirect_uri", c.Request.URL.Query(), &params.RedirectUri)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter redirect_uri: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := c.Query("state"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument state is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "response_type" -------------

	if paramValue := c.Query("response_type"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument response_type is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "response_type", c.Request.URL.Query(), &params.ResponseType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter response_type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "code_challenge" -------------

	err = runtime.BindQueryParameter("form", true, false, "code_challenge", c.Request.URL.Query(), &params.CodeChallenge)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code_challenge: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "code_challenge_method" -------------

	err = runtime.BindQueryParameter("form", true, false, "code_challenge_method", c.Request.URL.Query(), &params.CodeChallengeMethod)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code_challenge_method: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "idp_scopes" -------------

	err = runtime.BindQueryParameter("form", true, false, "idp_scopes", c.Request.URL.Query(), &params.IdpScopes)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter idp_scopes: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOauth2V1Auth(c, params)
}

// PostOauth2V1ExtensionsBlacklist operation middleware
func (siw *ServerInterfaceWrapper) PostOauth2V1ExtensionsBlacklist(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOauth2V1ExtensionsBlacklist(c)
}

// PostOauth2V1Introspect operation middleware
func (siw *ServerInterfaceWrapper) PostOauth2V1Introspect(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostOauth2V1IntrospectParams

	headers := c.Request.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = Authorization

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Authorization is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOauth2V1Introspect(c, params)
}

// PostOauth2V1Revoke operation middleware
func (siw *ServerInterfaceWrapper) PostOauth2V1Revoke(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostOauth2V1RevokeParams

	headers := c.Request.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = Authorization

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Authorization is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOauth2V1Revoke(c, params)
}

// PostOauth2V1Token operation middleware
func (siw *ServerInterfaceWrapper) PostOauth2V1Token(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostOauth2V1TokenParams

	headers := c.Request.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = Authorization

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Authorization is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOauth2V1Token(c, params)
}

// PostOauth2V1Userinfo operation middleware
func (siw *ServerInterfaceWrapper) PostOauth2V1Userinfo(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostOauth2V1UserinfoParams

	headers := c.Request.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = Authorization

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Authorization is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOauth2V1Userinfo(c, params)
}

// GetOauth2V1TenantWellKnownOpenidConfiguration operation middleware
func (siw *ServerInterfaceWrapper) GetOauth2V1TenantWellKnownOpenidConfiguration(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenant" -------------
	var tenant string

	err = runtime.BindStyledParameter("simple", false, "tenant", c.Param("tenant"), &tenant)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenant: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOauth2V1TenantWellKnownOpenidConfiguration(c, tenant)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/oauth2/v1/auth", wrapper.GetOauth2V1Auth)
	router.POST(options.BaseURL+"/oauth2/v1/extensions/blacklist", wrapper.PostOauth2V1ExtensionsBlacklist)
	router.POST(options.BaseURL+"/oauth2/v1/introspect", wrapper.PostOauth2V1Introspect)
	router.POST(options.BaseURL+"/oauth2/v1/revoke", wrapper.PostOauth2V1Revoke)
	router.POST(options.BaseURL+"/oauth2/v1/token", wrapper.PostOauth2V1Token)
	router.POST(options.BaseURL+"/oauth2/v1/userinfo", wrapper.PostOauth2V1Userinfo)
	router.GET(options.BaseURL+"/oauth2/v1/:tenant/.well-known/openid-configuration", wrapper.GetOauth2V1TenantWellKnownOpenidConfiguration)
}
