// Package oauth2V1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package oauth2V1

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetOauth2V1Auth request
	GetOauth2V1Auth(ctx context.Context, params *GetOauth2V1AuthParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOauth2V1ExtensionsBlacklistWithBody request with any body
	PostOauth2V1ExtensionsBlacklistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOauth2V1ExtensionsBlacklistWithFormdataBody(ctx context.Context, body PostOauth2V1ExtensionsBlacklistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOauth2V1IntrospectWithBody request with any body
	PostOauth2V1IntrospectWithBody(ctx context.Context, params *PostOauth2V1IntrospectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOauth2V1IntrospectWithFormdataBody(ctx context.Context, params *PostOauth2V1IntrospectParams, body PostOauth2V1IntrospectFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOauth2V1RevokeWithBody request with any body
	PostOauth2V1RevokeWithBody(ctx context.Context, params *PostOauth2V1RevokeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOauth2V1RevokeWithFormdataBody(ctx context.Context, params *PostOauth2V1RevokeParams, body PostOauth2V1RevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOauth2V1TokenWithBody request with any body
	PostOauth2V1TokenWithBody(ctx context.Context, params *PostOauth2V1TokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOauth2V1TokenWithFormdataBody(ctx context.Context, params *PostOauth2V1TokenParams, body PostOauth2V1TokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOauth2V1Userinfo request
	PostOauth2V1Userinfo(ctx context.Context, params *PostOauth2V1UserinfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOauth2V1TenantWellKnownOpenidConfiguration request
	GetOauth2V1TenantWellKnownOpenidConfiguration(ctx context.Context, tenant string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetOauth2V1Auth(ctx context.Context, params *GetOauth2V1AuthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOauth2V1AuthRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauth2V1ExtensionsBlacklistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauth2V1ExtensionsBlacklistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauth2V1ExtensionsBlacklistWithFormdataBody(ctx context.Context, body PostOauth2V1ExtensionsBlacklistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauth2V1ExtensionsBlacklistRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauth2V1IntrospectWithBody(ctx context.Context, params *PostOauth2V1IntrospectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauth2V1IntrospectRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauth2V1IntrospectWithFormdataBody(ctx context.Context, params *PostOauth2V1IntrospectParams, body PostOauth2V1IntrospectFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauth2V1IntrospectRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauth2V1RevokeWithBody(ctx context.Context, params *PostOauth2V1RevokeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauth2V1RevokeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauth2V1RevokeWithFormdataBody(ctx context.Context, params *PostOauth2V1RevokeParams, body PostOauth2V1RevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauth2V1RevokeRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauth2V1TokenWithBody(ctx context.Context, params *PostOauth2V1TokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauth2V1TokenRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauth2V1TokenWithFormdataBody(ctx context.Context, params *PostOauth2V1TokenParams, body PostOauth2V1TokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauth2V1TokenRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauth2V1Userinfo(ctx context.Context, params *PostOauth2V1UserinfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauth2V1UserinfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOauth2V1TenantWellKnownOpenidConfiguration(ctx context.Context, tenant string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOauth2V1TenantWellKnownOpenidConfigurationRequest(c.Server, tenant)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetOauth2V1AuthRequest generates requests for GetOauth2V1Auth
func NewGetOauth2V1AuthRequest(server string, params *GetOauth2V1AuthParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth2/v1/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, params.ClientId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idp_id", runtime.ParamLocationQuery, params.IdpId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, params.RedirectUri); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "response_type", runtime.ParamLocationQuery, params.ResponseType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.CodeChallenge != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code_challenge", runtime.ParamLocationQuery, *params.CodeChallenge); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CodeChallengeMethod != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code_challenge_method", runtime.ParamLocationQuery, *params.CodeChallengeMethod); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdpScopes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idp_scopes", runtime.ParamLocationQuery, *params.IdpScopes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOauth2V1ExtensionsBlacklistRequestWithFormdataBody calls the generic PostOauth2V1ExtensionsBlacklist builder with application/x-www-form-urlencoded body
func NewPostOauth2V1ExtensionsBlacklistRequestWithFormdataBody(server string, body PostOauth2V1ExtensionsBlacklistFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostOauth2V1ExtensionsBlacklistRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostOauth2V1ExtensionsBlacklistRequestWithBody generates requests for PostOauth2V1ExtensionsBlacklist with any type of body
func NewPostOauth2V1ExtensionsBlacklistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth2/v1/extensions/blacklist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOauth2V1IntrospectRequestWithFormdataBody calls the generic PostOauth2V1Introspect builder with application/x-www-form-urlencoded body
func NewPostOauth2V1IntrospectRequestWithFormdataBody(server string, params *PostOauth2V1IntrospectParams, body PostOauth2V1IntrospectFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostOauth2V1IntrospectRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostOauth2V1IntrospectRequestWithBody generates requests for PostOauth2V1Introspect with any type of body
func NewPostOauth2V1IntrospectRequestWithBody(server string, params *PostOauth2V1IntrospectParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth2/v1/introspect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostOauth2V1RevokeRequestWithFormdataBody calls the generic PostOauth2V1Revoke builder with application/x-www-form-urlencoded body
func NewPostOauth2V1RevokeRequestWithFormdataBody(server string, params *PostOauth2V1RevokeParams, body PostOauth2V1RevokeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostOauth2V1RevokeRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostOauth2V1RevokeRequestWithBody generates requests for PostOauth2V1Revoke with any type of body
func NewPostOauth2V1RevokeRequestWithBody(server string, params *PostOauth2V1RevokeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth2/v1/revoke")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostOauth2V1TokenRequestWithFormdataBody calls the generic PostOauth2V1Token builder with application/x-www-form-urlencoded body
func NewPostOauth2V1TokenRequestWithFormdataBody(server string, params *PostOauth2V1TokenParams, body PostOauth2V1TokenFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostOauth2V1TokenRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostOauth2V1TokenRequestWithBody generates requests for PostOauth2V1Token with any type of body
func NewPostOauth2V1TokenRequestWithBody(server string, params *PostOauth2V1TokenParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth2/v1/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostOauth2V1UserinfoRequest generates requests for PostOauth2V1Userinfo
func NewPostOauth2V1UserinfoRequest(server string, params *PostOauth2V1UserinfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth2/v1/userinfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetOauth2V1TenantWellKnownOpenidConfigurationRequest generates requests for GetOauth2V1TenantWellKnownOpenidConfiguration
func NewGetOauth2V1TenantWellKnownOpenidConfigurationRequest(server string, tenant string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant", runtime.ParamLocationPath, tenant)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth2/v1/%s/.well-known/openid-configuration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetOauth2V1AuthWithResponse request
	GetOauth2V1AuthWithResponse(ctx context.Context, params *GetOauth2V1AuthParams, reqEditors ...RequestEditorFn) (*GetOauth2V1AuthResponse, error)

	// PostOauth2V1ExtensionsBlacklistWithBodyWithResponse request with any body
	PostOauth2V1ExtensionsBlacklistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOauth2V1ExtensionsBlacklistResponse, error)

	PostOauth2V1ExtensionsBlacklistWithFormdataBodyWithResponse(ctx context.Context, body PostOauth2V1ExtensionsBlacklistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostOauth2V1ExtensionsBlacklistResponse, error)

	// PostOauth2V1IntrospectWithBodyWithResponse request with any body
	PostOauth2V1IntrospectWithBodyWithResponse(ctx context.Context, params *PostOauth2V1IntrospectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOauth2V1IntrospectResponse, error)

	PostOauth2V1IntrospectWithFormdataBodyWithResponse(ctx context.Context, params *PostOauth2V1IntrospectParams, body PostOauth2V1IntrospectFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostOauth2V1IntrospectResponse, error)

	// PostOauth2V1RevokeWithBodyWithResponse request with any body
	PostOauth2V1RevokeWithBodyWithResponse(ctx context.Context, params *PostOauth2V1RevokeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOauth2V1RevokeResponse, error)

	PostOauth2V1RevokeWithFormdataBodyWithResponse(ctx context.Context, params *PostOauth2V1RevokeParams, body PostOauth2V1RevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostOauth2V1RevokeResponse, error)

	// PostOauth2V1TokenWithBodyWithResponse request with any body
	PostOauth2V1TokenWithBodyWithResponse(ctx context.Context, params *PostOauth2V1TokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOauth2V1TokenResponse, error)

	PostOauth2V1TokenWithFormdataBodyWithResponse(ctx context.Context, params *PostOauth2V1TokenParams, body PostOauth2V1TokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostOauth2V1TokenResponse, error)

	// PostOauth2V1UserinfoWithResponse request
	PostOauth2V1UserinfoWithResponse(ctx context.Context, params *PostOauth2V1UserinfoParams, reqEditors ...RequestEditorFn) (*PostOauth2V1UserinfoResponse, error)

	// GetOauth2V1TenantWellKnownOpenidConfigurationWithResponse request
	GetOauth2V1TenantWellKnownOpenidConfigurationWithResponse(ctx context.Context, tenant string, reqEditors ...RequestEditorFn) (*GetOauth2V1TenantWellKnownOpenidConfigurationResponse, error)
}

type GetOauth2V1AuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOauth2V1AuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOauth2V1AuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOauth2V1ExtensionsBlacklistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active *bool `json:"active,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostOauth2V1ExtensionsBlacklistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOauth2V1ExtensionsBlacklistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOauth2V1IntrospectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntrospectResponse
}

// Status returns HTTPResponse.Status
func (r PostOauth2V1IntrospectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOauth2V1IntrospectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOauth2V1RevokeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOauth2V1RevokeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOauth2V1RevokeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOauth2V1TokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenResponse
}

// Status returns HTTPResponse.Status
func (r PostOauth2V1TokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOauth2V1TokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOauth2V1UserinfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserinfoResponse
}

// Status returns HTTPResponse.Status
func (r PostOauth2V1UserinfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOauth2V1UserinfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOauth2V1TenantWellKnownOpenidConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WellknowResponse
}

// Status returns HTTPResponse.Status
func (r GetOauth2V1TenantWellKnownOpenidConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOauth2V1TenantWellKnownOpenidConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetOauth2V1AuthWithResponse request returning *GetOauth2V1AuthResponse
func (c *ClientWithResponses) GetOauth2V1AuthWithResponse(ctx context.Context, params *GetOauth2V1AuthParams, reqEditors ...RequestEditorFn) (*GetOauth2V1AuthResponse, error) {
	rsp, err := c.GetOauth2V1Auth(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOauth2V1AuthResponse(rsp)
}

// PostOauth2V1ExtensionsBlacklistWithBodyWithResponse request with arbitrary body returning *PostOauth2V1ExtensionsBlacklistResponse
func (c *ClientWithResponses) PostOauth2V1ExtensionsBlacklistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOauth2V1ExtensionsBlacklistResponse, error) {
	rsp, err := c.PostOauth2V1ExtensionsBlacklistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauth2V1ExtensionsBlacklistResponse(rsp)
}

func (c *ClientWithResponses) PostOauth2V1ExtensionsBlacklistWithFormdataBodyWithResponse(ctx context.Context, body PostOauth2V1ExtensionsBlacklistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostOauth2V1ExtensionsBlacklistResponse, error) {
	rsp, err := c.PostOauth2V1ExtensionsBlacklistWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauth2V1ExtensionsBlacklistResponse(rsp)
}

// PostOauth2V1IntrospectWithBodyWithResponse request with arbitrary body returning *PostOauth2V1IntrospectResponse
func (c *ClientWithResponses) PostOauth2V1IntrospectWithBodyWithResponse(ctx context.Context, params *PostOauth2V1IntrospectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOauth2V1IntrospectResponse, error) {
	rsp, err := c.PostOauth2V1IntrospectWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauth2V1IntrospectResponse(rsp)
}

func (c *ClientWithResponses) PostOauth2V1IntrospectWithFormdataBodyWithResponse(ctx context.Context, params *PostOauth2V1IntrospectParams, body PostOauth2V1IntrospectFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostOauth2V1IntrospectResponse, error) {
	rsp, err := c.PostOauth2V1IntrospectWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauth2V1IntrospectResponse(rsp)
}

// PostOauth2V1RevokeWithBodyWithResponse request with arbitrary body returning *PostOauth2V1RevokeResponse
func (c *ClientWithResponses) PostOauth2V1RevokeWithBodyWithResponse(ctx context.Context, params *PostOauth2V1RevokeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOauth2V1RevokeResponse, error) {
	rsp, err := c.PostOauth2V1RevokeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauth2V1RevokeResponse(rsp)
}

func (c *ClientWithResponses) PostOauth2V1RevokeWithFormdataBodyWithResponse(ctx context.Context, params *PostOauth2V1RevokeParams, body PostOauth2V1RevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostOauth2V1RevokeResponse, error) {
	rsp, err := c.PostOauth2V1RevokeWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauth2V1RevokeResponse(rsp)
}

// PostOauth2V1TokenWithBodyWithResponse request with arbitrary body returning *PostOauth2V1TokenResponse
func (c *ClientWithResponses) PostOauth2V1TokenWithBodyWithResponse(ctx context.Context, params *PostOauth2V1TokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOauth2V1TokenResponse, error) {
	rsp, err := c.PostOauth2V1TokenWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauth2V1TokenResponse(rsp)
}

func (c *ClientWithResponses) PostOauth2V1TokenWithFormdataBodyWithResponse(ctx context.Context, params *PostOauth2V1TokenParams, body PostOauth2V1TokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostOauth2V1TokenResponse, error) {
	rsp, err := c.PostOauth2V1TokenWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauth2V1TokenResponse(rsp)
}

// PostOauth2V1UserinfoWithResponse request returning *PostOauth2V1UserinfoResponse
func (c *ClientWithResponses) PostOauth2V1UserinfoWithResponse(ctx context.Context, params *PostOauth2V1UserinfoParams, reqEditors ...RequestEditorFn) (*PostOauth2V1UserinfoResponse, error) {
	rsp, err := c.PostOauth2V1Userinfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauth2V1UserinfoResponse(rsp)
}

// GetOauth2V1TenantWellKnownOpenidConfigurationWithResponse request returning *GetOauth2V1TenantWellKnownOpenidConfigurationResponse
func (c *ClientWithResponses) GetOauth2V1TenantWellKnownOpenidConfigurationWithResponse(ctx context.Context, tenant string, reqEditors ...RequestEditorFn) (*GetOauth2V1TenantWellKnownOpenidConfigurationResponse, error) {
	rsp, err := c.GetOauth2V1TenantWellKnownOpenidConfiguration(ctx, tenant, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOauth2V1TenantWellKnownOpenidConfigurationResponse(rsp)
}

// ParseGetOauth2V1AuthResponse parses an HTTP response from a GetOauth2V1AuthWithResponse call
func ParseGetOauth2V1AuthResponse(rsp *http.Response) (*GetOauth2V1AuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOauth2V1AuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostOauth2V1ExtensionsBlacklistResponse parses an HTTP response from a PostOauth2V1ExtensionsBlacklistWithResponse call
func ParsePostOauth2V1ExtensionsBlacklistResponse(rsp *http.Response) (*PostOauth2V1ExtensionsBlacklistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOauth2V1ExtensionsBlacklistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active *bool `json:"active,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOauth2V1IntrospectResponse parses an HTTP response from a PostOauth2V1IntrospectWithResponse call
func ParsePostOauth2V1IntrospectResponse(rsp *http.Response) (*PostOauth2V1IntrospectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOauth2V1IntrospectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntrospectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOauth2V1RevokeResponse parses an HTTP response from a PostOauth2V1RevokeWithResponse call
func ParsePostOauth2V1RevokeResponse(rsp *http.Response) (*PostOauth2V1RevokeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOauth2V1RevokeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostOauth2V1TokenResponse parses an HTTP response from a PostOauth2V1TokenWithResponse call
func ParsePostOauth2V1TokenResponse(rsp *http.Response) (*PostOauth2V1TokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOauth2V1TokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOauth2V1UserinfoResponse parses an HTTP response from a PostOauth2V1UserinfoWithResponse call
func ParsePostOauth2V1UserinfoResponse(rsp *http.Response) (*PostOauth2V1UserinfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOauth2V1UserinfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserinfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOauth2V1TenantWellKnownOpenidConfigurationResponse parses an HTTP response from a GetOauth2V1TenantWellKnownOpenidConfigurationWithResponse call
func ParseGetOauth2V1TenantWellKnownOpenidConfigurationResponse(rsp *http.Response) (*GetOauth2V1TenantWellKnownOpenidConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOauth2V1TenantWellKnownOpenidConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WellknowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
