// Package oauth2V1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package oauth2V1

// IntrospectResponse defines model for introspect_response.
type IntrospectResponse struct {
	Active   *bool     `json:"active,omitempty"`
	Aud      *[]string `json:"aud,omitempty"`
	ClientId *string   `json:"client_id,omitempty"`
	Exp      *string   `json:"exp,omitempty"`
	Iat      *string   `json:"iat,omitempty"`
	Scope    *string   `json:"scope,omitempty"`
	Sub      *string   `json:"sub,omitempty"`
}

// TokenRequestBody defines model for token_requestBody.
type TokenRequestBody struct {
	// ClientId Required if grant_type is urn:ietf:params:oauth:grant-type:device_code
	ClientId *string `json:"client_id,omitempty"`

	// Code Required if grant_type is authorization_code
	Code *string `json:"code,omitempty"`

	// CodeVerifier Required if grant_type is authorization_code and code_challenge was specified in the original /auth request
	CodeVerifier *string `json:"code_verifier,omitempty"`

	// DeviceCode Required if grant_type is urn:ietf:params:oauth:grant-type:device_code
	DeviceCode *string `json:"device_code,omitempty"`

	// GrantType Available values : authorization_code, client_credentials, refresh_token, urn:ietf:params:oauth:grant-type:device_code
	// Default value : authorization_code
	GrantType string `json:"grant_type"`

	// RedirectUri Required if grant_type is authorization_code
	RedirectUri *string `json:"redirect_uri,omitempty"`

	// RefreshToken Required if grant_type is refresh_token. The value is a valid refresh token that was returned from this endpoint previously.
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// TokenResponse defines model for token_response.
type TokenResponse struct {
	AccessToken  *string  `json:"access_token,omitempty"`
	ExpiresIn    *float32 `json:"expires_in,omitempty"`
	RefreshToken *string  `json:"refresh_token,omitempty"`
	Scope        *string  `json:"scope,omitempty"`
	TokenType    *string  `json:"token_type,omitempty"`
}

// TokenTypeHintRequestBody defines model for token_type_hint_requestBody.
type TokenTypeHintRequestBody struct {
	Token string `json:"token"`

	// TokenTypeHint access_token, refresh_token
	TokenTypeHint string `json:"token_type_hint"`
}

// UserinfoResponse defines model for userinfo_response.
type UserinfoResponse struct {
	Addresss *struct {
		Country       *string `json:"country,omitempty"`
		Locality      *string `json:"locality,omitempty"`
		PostalCode    *string `json:"postal_code,omitempty"`
		Region        *string `json:"region,omitempty"`
		StreetAddress *string `json:"street_address,omitempty"`
	} `json:"addresss,omitempty"`
	Aud            *[]string `json:"aud,omitempty"`
	AuthTime       *float32  `json:"auth_time,omitempty"`
	Cid            *string   `json:"cid,omitempty"`
	Email          *string   `json:"email,omitempty"`
	EmailVerified  *bool     `json:"email_verified,omitempty"`
	FamilyName     *string   `json:"family_name,omitempty"`
	GivenName      *string   `json:"given_name,omitempty"`
	Iat            *string   `json:"iat,omitempty"`
	IdpId          *string   `json:"idp_id,omitempty"`
	IdpTenant      *string   `json:"idp_tenant,omitempty"`
	IdpType        *string   `json:"idp_type,omitempty"`
	Iss            *string   `json:"iss,omitempty"`
	Kid            *string   `json:"kid,omitempty"`
	Locale         *string   `json:"locale,omitempty"`
	MiddleName     *string   `json:"middle_name,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Nickname       *string   `json:"nickname,omitempty"`
	PhoneNumber    *string   `json:"phone_number,omitempty"`
	PreferUsername *string   `json:"prefer_username,omitempty"`
	Rat            *float32  `json:"rat,omitempty"`
	Sub            *string   `json:"sub,omitempty"`
}

// WellknowResponse defines model for wellknow_response.
type WellknowResponse struct {
	AuthorizationEndpoint            *string   `json:"authorization_endpoint,omitempty"`
	ClaimsSupported                  *[]string `json:"claims_supported,omitempty"`
	IdTokenSigningAlgValuesSupported *[]string `json:"id_token_signing_alg_values_supported,omitempty"`
	Issuer                           *string   `json:"issuer,omitempty"`

	// JwksUri https://baseurl.hponecloud.io/10/jwks.json
	JwksUri *string `json:"jwks_uri,omitempty"`

	// RegistrationEndpoint https://baseurl.hponecloud.io/oauth2/v1/register
	RegistrationEndpoint   *string   `json:"registration_endpoint,omitempty"`
	ResponseTypesSupported *[]string `json:"response_types_supported,omitempty"`
	SubjectTypesSupported  *[]string `json:"subject_types_supported,omitempty"`
	TokenEndpoint          *string   `json:"token_endpoint,omitempty"`

	// UserInfoEndpoint https://baseurl.hponecloud.io/oauth2/userinfo
	UserInfoEndpoint *string `json:"user_info_endpoint,omitempty"`
}

// GetOauth2V1AuthParams defines parameters for GetOauth2V1Auth.
type GetOauth2V1AuthParams struct {
	ClientId    string `form:"client_id" json:"client_id"`
	IdpId       string `form:"idp_id" json:"idp_id"`
	RedirectUri string `form:"redirect_uri" json:"redirect_uri"`
	State       string `form:"state" json:"state"`

	// ResponseType Available values : code
	ResponseType string `form:"response_type" json:"response_type"`

	// CodeChallenge The code challenge, if this is a pkce request
	CodeChallenge *string `form:"code_challenge,omitempty" json:"code_challenge,omitempty"`

	// CodeChallengeMethod The code challenge method must be S256, if this is a pkce request
	CodeChallengeMethod *string `form:"code_challenge_method,omitempty" json:"code_challenge_method,omitempty"`

	// IdpScopes Space-seperated. The idp dynamic scopes should be in your client's scope list, will be passes to idp.
	IdpScopes *string `form:"idp_scopes,omitempty" json:"idp_scopes,omitempty"`
}

// PostOauth2V1IntrospectParams defines parameters for PostOauth2V1Introspect.
type PostOauth2V1IntrospectParams struct {
	// Authorization The client_id and client_secret should be included in the Authorization header of the request as a Basic auth base64-encoded string.
	Authorization string `json:"Authorization"`
}

// PostOauth2V1RevokeParams defines parameters for PostOauth2V1Revoke.
type PostOauth2V1RevokeParams struct {
	// Authorization The client_id and client_secret should be included in the Authorization header of the request as a Basic auth base64-encoded string.
	Authorization string `json:"Authorization"`
}

// PostOauth2V1TokenParams defines parameters for PostOauth2V1Token.
type PostOauth2V1TokenParams struct {
	// Authorization The client_id and client_secret should be included in the Authorization header of the request as a Basic auth base64-encoded string.
	Authorization string `json:"Authorization"`
}

// PostOauth2V1UserinfoParams defines parameters for PostOauth2V1Userinfo.
type PostOauth2V1UserinfoParams struct {
	// Authorization The Access Token obtained from an OpenID Connect Authentication Request MUST be sent as a Bearer Token, per Section 2 of OAuth 2.0 Bearer Token Usage [RFC6750]
	Authorization string `json:"Authorization"`
}

// PostOauth2V1ExtensionsBlacklistFormdataRequestBody defines body for PostOauth2V1ExtensionsBlacklist for application/x-www-form-urlencoded ContentType.
type PostOauth2V1ExtensionsBlacklistFormdataRequestBody = TokenTypeHintRequestBody

// PostOauth2V1IntrospectFormdataRequestBody defines body for PostOauth2V1Introspect for application/x-www-form-urlencoded ContentType.
type PostOauth2V1IntrospectFormdataRequestBody = TokenTypeHintRequestBody

// PostOauth2V1RevokeFormdataRequestBody defines body for PostOauth2V1Revoke for application/x-www-form-urlencoded ContentType.
type PostOauth2V1RevokeFormdataRequestBody = TokenTypeHintRequestBody

// PostOauth2V1TokenFormdataRequestBody defines body for PostOauth2V1Token for application/x-www-form-urlencoded ContentType.
type PostOauth2V1TokenFormdataRequestBody = TokenRequestBody
